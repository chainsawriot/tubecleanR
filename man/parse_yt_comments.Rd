% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_yt_comments.R
\name{parse_yt_comments}
\alias{parse_yt_comments}
\title{Parse YouTube Comments
This function processes a dataframe of YouTube comments, extracting and cleaning various elements such as emojis, smileys, URLs, timestamps, and user mentions. It supports comment dataframes created with the \code{\link[tuber]{get_all_comments}},\code{\link[tuber]{get_comments}} or \code{\link[vosonSML]{Collect}} functions.}
\usage{
parse_yt_comments(data, package = "auto", verbose = FALSE)
}
\arguments{
\item{data}{A dataframe containing YouTube comments. The structure of this dataframe should conform to the output of the 'tuber' or 'vosonSML' package.}

\item{package}{A character string specifying the package that was used to collect the comment data. The default value is "auto", which automatically detects the package based on the structure of the `data`. Other possible values are "tuber" and "vosonSML".}

\item{verbose}{A logical parameter. If TRUE, the function prints progress reports to the console.}
}
\value{
A dataframe with the original comment data and additional columns for cleaned comments, emojis, emoji descriptions, smileys, URLs, timestamps, and user mentions. The dataframe also includes metadata as attributes, such as the origin package, tubecleanR version, and counts of comments, links, emojis, smileys, user mentions, and timestamps.
}
\description{
Parse YouTube Comments
This function processes a dataframe of YouTube comments, extracting and cleaning various elements such as emojis, smileys, URLs, timestamps, and user mentions. It supports comment dataframes created with the \code{\link[tuber]{get_all_comments}},\code{\link[tuber]{get_comments}} or \code{\link[vosonSML]{Collect}} functions.
}
\note{
This function requires the 'tuber' or 'vosonSML' package for data collection. The 'tubecleanR' minipackage is only for processing.
}
\examples{
# Loading example comments bundled with the package
LastWeekTonight_comments <- readRDS(system.file("RawLWTComments.rds", package = "tubecleanR"))

# parsing comments
parsed_comments <- parse_yt_comments(LastWeekTonight_comments)
}
\keyword{comments,}
\keyword{parsing}
\keyword{youtube,}
